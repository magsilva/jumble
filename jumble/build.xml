<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="jumble" basedir="." default="jar">

  <property name="src.dir" location="src" />
  <property name="test.dir" location="test" />
  <property name="lib.dir" location="lib" />
  <property name="build.dir" location="build" />
  <property name="src.build.dir" location="${build.dir}/src" />
  <property name="test.build.dir" location="${build.dir}/test" />
  <property name="report.build.dir" location="${build.dir}/reports" />
  <!-- latest versions of JUnit plus its associated HamCrest-Core project. -->
  <property name="junit.jar" location="${lib.dir}/junit-4.11.jar" />
  <property name="hamcrest-core.jar" location="${lib.dir}/hamcrest-core-1.3.jar" />

  <path id="classpath">
    <pathelement location="${lib.dir}/bcel.jar" />
    <pathelement location="${junit.jar}" />
    <pathelement location="${lib.dir}/reeltwo.jar" />
    <pathelement location="${lib.dir}/testclasses.jar" />
    <pathelement location="${lib.dir}/jumble-annotations.jar" />
    <pathelement location="${src.build.dir}" />
    <pathelement location="${test.build.dir}" />
  </path>

  <target name="init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${src.build.dir}" />
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${report.build.dir}" />
  </target>

  <target name="clean">
    <delete dir="${build.dir}" />
  </target>


  <target name="compile" depends="init">
    <javac includeantruntime="false" srcdir="${src.dir}" destdir="${src.build.dir}" includes="**/*.java" source="1.7" debug="on">
      <classpath>
	<path refid="classpath" />
      </classpath>
    </javac>
  </target>

  <target name="jar" depends="compile" description="Generates a JAR file containing Jumble and its dependencies">
    <jar destfile="jumble.jar">
      <fileset dir="${src.build.dir}" includes="**/*.class" />
      <zipfileset src="${lib.dir}/bcel.jar" />
      <zipfileset src="${lib.dir}/jumble-annotations.jar" />
      <zipfileset src="${junit.jar}" />
      <!-- zipfileset src="${lib.dir}/reeltwo.jar" / -->
      <manifest>
	<attribute name="Main-Class" value="com.reeltwo.jumble.Jumble" />
      </manifest>
    </jar>
  </target>

  <target name="compile-tests" depends="compile">
    <javac includeantruntime="false" srcdir="${test.dir}" destdir="${test.build.dir}" debug="on">
      <classpath>
	<path refid="classpath" />
      </classpath>
    </javac>
    <!-- now copy sample output files into test.build.dir -->
    <copy todir="${test.build.dir}">
      <fileset dir="${test.dir}">
	<include name="**/*.txt" />
	<include name="**/*.csv" />
      </fileset>
    </copy>
  </target>

  <target name="test" description="Run tests" depends="compile-tests">
    <junit fork="yes" printsummary="yes">
      <classpath>
	<path refid="classpath" />
      </classpath>
      <formatter type="plain" />
      <formatter type="xml" />
      <test name="AllTests" todir="${report.build.dir}" />
<!--
      <batchtest fork="yes" todir="${build.dir}/reports">
        <fileset dir="${test.dir}">
          <include name="**/*Test*.java"/>
          <exclude name="**/AllTests.java"/>
        </fileset>
      </batchtest>
-->

    </junit>
  </target>

  <!-- checkstyle -->
  <taskdef resource="checkstyletask.properties" classpath="${lib.dir}/checkstyle-5.7-all.jar" />
  <target name="checkstyle" depends="compile" description="Run checkstyle on all source code.">
    <checkstyle config=".cvscheck/checkstyle_config.xml" failOnViolation="false" classpathref="classpath">
      <fileset dir="src" includes="**/*.java" />
      <fileset dir="test" includes="**/*.java" />
      <formatter type="plain" />
      <formatter type="xml" toFile="${report.build.dir}/checkstyle-result.xml" />
    </checkstyle>
  </target>

  <!-- findbugs -->
  <property name="findbugs.home" location="${lib.dir}/findbugs" /> <!-- Override this to run a different version of findbugs -->
  <property name="findbugs.loc" value="" /> <!-- Override this to run findbugs just on a subdirectory -->
  <taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties" classpath="${findbugs.home}/lib/findbugs-ant.jar" />
  <target name="findbugs" depends="compile,compile-tests" description="Run findbugs">
    <findbugs home="${findbugs.home}" output="xml" outputFile="${report.build.dir}/findbugs-report.xml" excludeFilter=".cvscheck/findbugs_config.xml" effort="max" reportLevel="low" jvmargs="-Xmx1000M">
      <auxClasspath>
        <fileset dir="${lib.dir}" includes="*.jar" />
      </auxClasspath>
      <sourcePath path="${src.dir}" />
      <sourcePath path="${test.dir}" />
      <class location="${src.build.dir}/${findbugs.loc}" />
      <class location="${test.build.dir}/${findbugs.loc}" />
      <systemProperty name="classContext.modelInstanceof" value="true" />
    </findbugs>
  </target>

  <!-- javadocs -->
  <target name="javadoc" depends="compile" description="Build javadocs">
    <javadoc sourcepath="${src.dir}" destdir="${build.dir}/javadocs" source="1.7"
             Author="true" Version="true" Package="true" 
             useexternalfile="true" additionalparam="-quiet" docfilessubdirs="true">
        <classpath>
	  <path refid="classpath" />
        </classpath>
    </javadoc>
  </target>

  <target name="spellcheck" depends="compile" description="Run spellchecker over source.">
    <java jar="${lib.dir}/spelling.jar" fork="true">
      <arg line="-c"/>
      <arg file=".cvscheck/spelling.case-sensitive"/>
      <arg line="-d"/>
      <arg file=".cvscheck/spelling.case-insensitive"/>
      <arg line="-x"/>
      <arg file=".cvscheck/spelling.excludes"/>
      <arg line="--classpath"/>
      <arg path="${src.build.dir}"/>
      <arg file="${src.dir}"/>
    </java>
  </target>

  <!-- Build jar file containing utility code from the Reel Two
       internal source tree. Can only be run by someone at Reel
       Two.
  -->
  <property name="ext.src.dir" value="${user.home}/java/main/src" />
  <target name="makeExtLibJar" depends="clean,init" description="Generates a JAR file of the reeltwo dependencies used by jumble">
    <copy todir="${build.dir}" includeEmptyDirs="no">
      <fileset dir="${ext.src.dir}">
	<include name="com/reeltwo/util/CLIFlags.java" />
	<include name="com/reeltwo/util/WrappingStringBuffer.java" />
      </fileset>
    </copy>
    <javac includeantruntime="false" srcdir="${build.dir}" destdir="${build.dir}" source="1.7" target="1.7" depend="true" debug="true" />
    <jar destfile="${lib.dir}/reeltwo.jar" index="true">
      <fileset dir="${build.dir}" />
      <fileset dir="." includes="COPYING.txt" />
      <!-- Use GPL for the utility code -->
    </jar>
  </target>
</project>
